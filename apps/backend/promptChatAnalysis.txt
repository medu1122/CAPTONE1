# Core Behaviors
## 1. Case 1 – Text-only message
- Khi người dùng chỉ nhập text (ví dụ: “Cách trồng cây lan trong mùa mưa?”):
  - Gọi GPT API để sinh phản hồi.
  - Kèm dữ liệu thời tiết hiện tại (từ OpenWeather API).
  - GPT trả lời tự nhiên và tư vấn phù hợp.
  - Gợi ý thêm sản phẩm nếu cần (fetch từ product_recommendations hoặc link Shopee).

## 2. Case 2 – Image + text (hoặc chỉ ảnh)
- Khi người dùng gửi ảnh:
  - Upload ảnh → gọi Plant.id API → nhận kết quả cây & bệnh.
  - GPT tạo phản hồi “Đây là phân tích của GreenGrow…” + diễn giải kết quả.
  - Hiển thị thông tin qua 3 card bên phải:
    - OverviewCard: tóm tắt tên cây, bệnh, cách chăm sóc.
    - ImageAnalysisCard: hiển thị ảnh + bounding box (nếu có).
    - ProductListCard: hiển thị gợi ý sản phẩm phù hợp.

- Nếu câu hỏi quá dài hoặc mơ hồ:
  - GPT xác định xem có cần gọi Plant.id hay chỉ trả lời text.
  - Trả lời tương ứng.

## 3. Case 3 – Invalid / spam input
- Nếu Plant.id trả độ tin cậy thấp hoặc GPT phát hiện câu hỏi không liên quan:
  - Bot trả lời “Ảnh không hợp lệ” hoặc “Câu hỏi không thuộc lĩnh vực nông nghiệp”.
  - Không hiển thị thẻ phân tích.

---

# Weather Context
- Hiển thị widget thời tiết (trên header ChatAnalyzePage).
- Dùng OpenWeather API `/weather` và `/forecast` để lấy:
  - Nhiệt độ, độ ẩm, trạng thái trời hiện tại.
  - Dự báo 3–5 ngày tới.
- Cho phép:
  - Lấy vị trí tự động bằng `navigator.geolocation`.
  - Hoặc cho người dùng chọn tỉnh/thành thủ công.

---

# Additional Scenarios
- Hỗ trợ hội thoại liên tục (GPT nhớ ngữ cảnh trong cùng session).
- Nếu người dùng hỏi mơ hồ → bot yêu cầu gửi ảnh.
- Nếu gửi ảnh trùng → kiểm tra duplicate, tránh gọi API tốn phí.
- Nếu nhiều cây trong ảnh → bot phản hồi yêu cầu chọn cây cụ thể.
- Hỗ trợ guest session (không login vẫn dùng tạm).
- Hiển thị loading state khi AI đang phân tích.


cần bổ sung
weather/
├── weather.controller.js    # Xử lý request từ frontend (/api/v1/weather)
├── weather.service.js       # Gọi OpenWeather API
├── weather.routes.js        # Định nghĩa route
└── weather.validation.js    # Xác thực query (cityName, lat/lon)
productRecommendations/ module

👉 để backend quản lý & trả danh sách gợi ý sản phẩm cho GPT / Chat UI.

📁 Cấu trúc:

productRecommendations/
├── productRecommendation.controller.js
├── productRecommendation.model.js
├── productRecommendation.routes.js
└── productRecommendation.service.js


📡 Endpoint:

GET /api/v1/products/recommendations?plant=tomato&disease=leafspot
Dữ liệu sẽ hiển thị ở ProductListCard.tsx.

Có thể thêm trường externalLink (Shopee / Tiki / Lazada).
NÊN CÓ (ĐỂ TỐI ƯU HỆ THỐNG)
🧠 aiAssistant/ module

👉 trung gian giữa GPT API và các module khác (chat, analyze, weather, product).
Thay vì gọi GPT trực tiếp trong chat.service.js, tạo service riêng để dễ mở rộng logic AI.

📁 Cấu trúc:

aiAssistant/
├── ai.controller.js
├── ai.service.js       # Gọi GPT API, thêm context (thời tiết, phân tích hình, v.v.)
├── ai.routes.js
└── ai.validation.js


📡 Endpoint:

POST /api/v1/ai/respond


📋 Lợi ích:

Giữ code sạch, dễ test.

Có thể log toàn bộ GPT input/output (để debug và training sau này).

🧩 moderation/ middleware

👉 để lọc các nội dung không hợp lệ, spam, hoặc ảnh không phải cây.

📁 Cấu trúc:

common/middleware/moderation.js


📋 Gợi ý logic:

Với text → kiểm tra keyword có liên quan đến nông nghiệp không.

Với ảnh → nếu file không phải .jpg, .png, hoặc kích thước < 100KB → từ chối.

Có thể tích hợp thêm OpenAI Moderation API (sau này).