### Enhanced Authentication API Test Examples
### Use with VS Code REST Client or Postman

@baseUrl = http://localhost:4000/api/v1
@contentType = application/json

### Variables
@accessToken = 
@refreshToken = 
@userId = 

### ===========================================
### 1. HEALTH CHECK
### ===========================================

GET {{baseUrl}}/health

### ===========================================
### 2. USER REGISTRATION
### ===========================================

POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "password": "SecurePass123"
}

### ===========================================
### 3. USER LOGIN
### ===========================================

POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "password": "SecurePass123"
}

### ===========================================
### 4. GET USER PROFILE (Protected)
### ===========================================

GET {{baseUrl}}/auth/profile
Authorization: Bearer {{accessToken}}

### ===========================================
### 5. REFRESH ACCESS TOKEN
### ===========================================

POST {{baseUrl}}/auth/refresh
Content-Type: {{contentType}}

{
  "refreshToken": "{{refreshToken}}"
}

### ===========================================
### 6. LOGOUT CURRENT DEVICE
### ===========================================

POST {{baseUrl}}/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: {{contentType}}

{
  "refreshToken": "{{refreshToken}}"
}

### ===========================================
### 7. LOGOUT ALL DEVICES
### ===========================================

POST {{baseUrl}}/auth/logout-all
Authorization: Bearer {{accessToken}}

### ===========================================
### 8. ERROR SCENARIOS - INVALID CREDENTIALS
### ===========================================

POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "password": "WrongPassword"
}

### ===========================================
### 9. ERROR SCENARIOS - DUPLICATE EMAIL
### ===========================================

POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "Jane Doe",
  "email": "john.doe@example.com",
  "password": "AnotherPass123"
}

### ===========================================
### 10. ERROR SCENARIOS - WEAK PASSWORD
### ===========================================

POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "Weak User",
  "email": "weak@example.com",
  "password": "123"
}

### ===========================================
### 11. ERROR SCENARIOS - INVALID EMAIL
### ===========================================

POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "Invalid User",
  "email": "invalid-email",
  "password": "ValidPass123"
}

### ===========================================
### 12. ERROR SCENARIOS - MISSING FIELDS
### ===========================================

POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "Incomplete User"
}

### ===========================================
### 13. ERROR SCENARIOS - EXPIRED TOKEN
### ===========================================

GET {{baseUrl}}/auth/profile
Authorization: Bearer expired_token_here

### ===========================================
### 14. ERROR SCENARIOS - INVALID TOKEN FORMAT
### ===========================================

GET {{baseUrl}}/auth/profile
Authorization: InvalidFormat

### ===========================================
### 15. ERROR SCENARIOS - MISSING TOKEN
### ===========================================

GET {{baseUrl}}/auth/profile

### ===========================================
### 16. RATE LIMITING TEST (Run multiple times quickly)
### ===========================================

POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "password": "SecurePass123"
}

### ===========================================
### 17. CHAT INTEGRATION TEST (Requires valid token)
### ===========================================

POST {{baseUrl}}/chat/sessions/start
Authorization: Bearer {{accessToken}}
Content-Type: {{contentType}}

{
  "title": "My Plant Chat Session",
  "meta": {
    "plantType": "indoor",
    "difficulty": "beginner"
  }
}

### ===========================================
### 18. CHAT MESSAGE TEST (Requires valid token)
### ===========================================

POST {{baseUrl}}/chat/messages
Authorization: Bearer {{accessToken}}
Content-Type: {{contentType}}

{
  "sessionId": "your-session-id-here",
  "role": "user",
  "message": "Hello, I need help with my plant",
  "attachments": [],
  "related": null,
  "meta": {}
}

### ===========================================
### 19. EMAIL VERIFICATION TEST
### ===========================================

POST {{baseUrl}}/email-verification/create-token
Content-Type: {{contentType}}

{
  "userId": "{{userId}}"
}

### ===========================================
### 20. EMAIL VERIFICATION TEST
### ===========================================

GET {{baseUrl}}/auth/verify-email?token=YOUR_VERIFICATION_TOKEN&uid=YOUR_USER_ID

### ===========================================
### 21. RESEND VERIFICATION EMAIL TEST
### ===========================================

POST {{baseUrl}}/auth/verify-email/resend
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com"
}

### ===========================================
### 22. PASSWORD RESET TEST
### ===========================================

POST {{baseUrl}}/password-reset/request
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com"
}

### ===========================================
### NOTES:
### ===========================================
### 1. Copy accessToken and refreshToken from login response
### 2. Copy userId from register response
### 3. Test rate limiting by running requests quickly
### 4. Test error scenarios to verify proper error handling
### 5. All protected routes require valid Bearer token
### 6. Rate limiting applies to all auth endpoints
### 7. Password must meet complexity requirements
### 8. Email must be valid format and unique
### 9. Tokens expire based on JWT_ACCESS_EXPIRES setting
### 10. Refresh tokens expire based on JWT_REFRESH_EXPIRES_DAYS setting
### 11. Email verification: Check email inbox for verification link
### 12. Verification tokens expire after 24 hours
### 13. Resend verification has rate limit (1 email per 60 seconds)
### 14. Email verification is required before full access
### 15. Welcome email is sent after successful verification