import nodemailer from 'nodemailer';
import { httpError } from '../utils/http.js';

/**
 * Email Service v·ªõi Gmail SMTP
 * H·ªó tr·ª£ g·ª≠i email verification, password reset, notifications
 */

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  /**
   * Kh·ªüi t·∫°o Nodemailer transporter v·ªõi Gmail SMTP
   */
  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: parseInt(process.env.SMTP_PORT) || 587,
        secure: process.env.SMTP_SECURE === 'true' || false,
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
        tls: {
          rejectUnauthorized: false, // Cho development
        },
      });

      // Verify connection configuration
      this.verifyConnection();
    } catch (error) {
      console.error('‚ùå Email Service initialization failed:', error.message);
    }
  }

  /**
   * Verify SMTP connection
   */
  async verifyConnection() {
    try {
      await this.transporter.verify();
      console.log('‚úÖ SMTP connection verified successfully');
    } catch (error) {
      console.error('‚ùå SMTP connection failed:', error.message);
      console.error('üîß Please check your SMTP credentials in .env file');
    }
  }

  /**
   * G·ª≠i email verification
   * @param {string} to - Email ng∆∞·ªùi nh·∫≠n
   * @param {string} name - T√™n ng∆∞·ªùi d√πng
   * @param {string} token - Raw verification token
   * @param {string} userId - User ID
   * @returns {Promise<object>} K·∫øt qu·∫£ g·ª≠i email
   */
  async sendVerificationEmail(to, name, token, userId) {
    try {
      const appUrl = process.env.APP_URL || 'http://localhost:3000';
      const verificationUrl = `${appUrl}/verify-email?token=${token}&uid=${userId}`;

      const mailOptions = {
        from: process.env.FROM_EMAIL || 'GreenGrow <noreply@greengrow.com>',
        to: to,
        subject: 'üå± X√°c th·ª±c t√†i kho·∫£n GreenGrow',
        html: this.getVerificationEmailTemplate(name, verificationUrl),
        text: this.getVerificationEmailText(name, verificationUrl),
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log(`‚úÖ Verification email sent to ${to}`);
      return {
        success: true,
        messageId: result.messageId,
        to: to,
      };
    } catch (error) {
      console.error('‚ùå Failed to send verification email:', error.message);
      throw httpError(500, 'Failed to send verification email');
    }
  }

  /**
   * G·ª≠i email password reset
   * @param {string} to - Email ng∆∞·ªùi nh·∫≠n
   * @param {string} name - T√™n ng∆∞·ªùi d√πng
   * @param {string} token - Raw reset token
   * @param {string} userId - User ID
   * @returns {Promise<object>} K·∫øt qu·∫£ g·ª≠i email
   */
  async sendPasswordResetEmail(to, name, token, userId) {
    try {
      const appUrl = process.env.APP_URL || 'http://localhost:3000';
      const resetUrl = `${appUrl}/reset-password?token=${token}&uid=${userId}`;

      const mailOptions = {
        from: process.env.FROM_EMAIL || 'GreenGrow <noreply@greengrow.com>',
        to: to,
        subject: 'üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u GreenGrow',
        html: this.getPasswordResetEmailTemplate(name, resetUrl),
        text: this.getPasswordResetEmailText(name, resetUrl),
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log(`‚úÖ Password reset email sent to ${to}`);
      return {
        success: true,
        messageId: result.messageId,
        to: to,
      };
    } catch (error) {
      console.error('‚ùå Failed to send password reset email:', error.message);
      throw httpError(500, 'Failed to send password reset email');
    }
  }

  /**
   * G·ª≠i email welcome sau khi verify
   * @param {string} to - Email ng∆∞·ªùi nh·∫≠n
   * @param {string} name - T√™n ng∆∞·ªùi d√πng
   * @returns {Promise<object>} K·∫øt qu·∫£ g·ª≠i email
   */
  async sendWelcomeEmail(to, name) {
    try {
      const mailOptions = {
        from: process.env.FROM_EMAIL || 'GreenGrow <noreply@greengrow.com>',
        to: to,
        subject: 'üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi GreenGrow!',
        html: this.getWelcomeEmailTemplate(name),
        text: this.getWelcomeEmailText(name),
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log(`‚úÖ Welcome email sent to ${to}`);
      return {
        success: true,
        messageId: result.messageId,
        to: to,
      };
    } catch (error) {
      console.error('‚ùå Failed to send welcome email:', error.message);
      throw httpError(500, 'Failed to send welcome email');
    }
  }

  /**
   * HTML template cho email verification
   */
  getVerificationEmailTemplate(name, verificationUrl) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>X√°c th·ª±c t√†i kho·∫£n GreenGrow</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background: #4CAF50; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üå± GreenGrow</h1>
            <h2>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
          </div>
          <div class="content">
            <h3>Xin ch√†o ${name}!</h3>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n GreenGrow. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n.</p>
            <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n:</p>
            <a href="${verificationUrl}" class="button">X√°c th·ª±c t√†i kho·∫£n</a>
            <p>Ho·∫∑c copy link n√†y v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; background: #eee; padding: 10px; border-radius: 4px;">${verificationUrl}</p>
            <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
          </div>
          <div class="footer">
            <p>¬© 2024 GreenGrow. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu email n√†y, vui l√≤ng b·ªè qua.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Text template cho email verification
   */
  getVerificationEmailText(name, verificationUrl) {
    return `
Xin ch√†o ${name}!

C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n GreenGrow. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n.

Nh·∫•n v√†o link n√†y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n:
${verificationUrl}

L∆∞u √Ω: Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.

¬© 2024 GreenGrow. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu email n√†y, vui l√≤ng b·ªè qua.
    `;
  }

  /**
   * HTML template cho password reset
   */
  getPasswordResetEmailTemplate(name, resetUrl) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u GreenGrow</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #FF9800; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background: #FF9800; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üîê GreenGrow</h1>
            <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
          </div>
          <div class="content">
            <h3>Xin ch√†o ${name}!</h3>
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n GreenGrow c·ªßa b·∫°n.</p>
            <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
            <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
            <p>Ho·∫∑c copy link n√†y v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; background: #eee; padding: 10px; border-radius: 4px;">${resetUrl}</p>
            <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.</p>
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
          </div>
          <div class="footer">
            <p>¬© 2024 GreenGrow. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Text template cho password reset
   */
  getPasswordResetEmailText(name, resetUrl) {
    return `
Xin ch√†o ${name}!

Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n GreenGrow c·ªßa b·∫°n.

Nh·∫•n v√†o link n√†y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:
${resetUrl}

L∆∞u √Ω: Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.

N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.

¬© 2024 GreenGrow. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
    `;
  }

  /**
   * HTML template cho welcome email
   */
  getWelcomeEmailTemplate(name) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Ch√†o m·ª´ng ƒë·∫øn v·ªõi GreenGrow</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }
          .button { display: inline-block; background: #4CAF50; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üéâ GreenGrow</h1>
            <h2>Ch√†o m·ª´ng b·∫°n!</h2>
          </div>
          <div class="content">
            <h3>Xin ch√†o ${name}!</h3>
            <p>Ch√∫c m·ª´ng! T√†i kho·∫£n GreenGrow c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.</p>
            <p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:</p>
            <ul>
              <li>üå± Ph√¢n t√≠ch c√¢y tr·ªìng v·ªõi AI</li>
              <li>üí¨ Chat v·ªõi chuy√™n gia n√¥ng nghi·ªáp</li>
              <li>üìö H·ªçc c√°ch chƒÉm s√≥c c√¢y</li>
              <li>üë• Tham gia c·ªông ƒë·ªìng n√¥ng d√¢n</li>
            </ul>
            <p>H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh tr·ªìng c√¢y th√¥ng minh c·ªßa b·∫°n!</p>
          </div>
          <div class="footer">
            <p>¬© 2024 GreenGrow. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Text template cho welcome email
   */
  getWelcomeEmailText(name) {
    return `
Xin ch√†o ${name}!

Ch√∫c m·ª´ng! T√†i kho·∫£n GreenGrow c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.

B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:
- Ph√¢n t√≠ch c√¢y tr·ªìng v·ªõi AI
- Chat v·ªõi chuy√™n gia n√¥ng nghi·ªáp  
- H·ªçc c√°ch chƒÉm s√≥c c√¢y
- Tham gia c·ªông ƒë·ªìng n√¥ng d√¢n

H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh tr·ªìng c√¢y th√¥ng minh c·ªßa b·∫°n!

¬© 2024 GreenGrow. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
    `;
  }
}

// Export singleton instance
const emailService = new EmailService();
export default emailService;
